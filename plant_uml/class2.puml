@startuml
'https://plantuml.com/class-diagram

@startuml


package com.example.create_db_file{
    package from_file{

        package domain{
            package file_helper{
                interface FileHelperFactory{
                    - FileInformationHelperクラスを提供する処理(String: ファイル名)
                }
                interface FileInformationHelper{
                    + ファイルのヘッダーを読み込む処理(InputStream) : 戻り値 Map<Integer, String>
                    + ファイルを保存する処理(String) : 戻り値 String ※ファイルを保存したPath
                    + インサート分を生成する処理(InputStream, DbColumnsForm) : 戻り値 String ※生成されたInsert文
                }

                class FileHelperFactoryImpl implements FileHelperFactory{
                    - excelHelper: FileInformationHelper
                    - csvHelper: FileInformationHelper
                    - noneHelper: FileInformationHelper
                    + createFileInformationHelper(filename: String): FileInformationHelper
                }

                class CsvInformationHelper implements FileInformationHelper{
                    + analyzeHeader(in: InputStream): Map<Integer, String>
                    + saveFile(in: InputStream, filePath: String): String
                    + makeInsertSentence(in: InputStream, form: DBColumnsForm): String
                }

                class ExcelInformationHelper implements FileInformationHelper{
                    + analyzeHeader(in: InputStream): Map<Integer, String>
                    + saveFile(in: InputStream, filePath: String): String
                    + makeInsertSentence(in: InputStream, form: DBColumnsForm): String
                }

                class NoneHelper implements FileInformationHelper{
                    + analyzeHeader(in: InputStream): Map<Integer, String>
                    + saveFile(in: InputStream, filePath: String): String
                    + makeInsertSentence(in: InputStream, form: DBColumnsForm): String
                }


            }

            package service{
                interface DbFileCreateService{
                    + ファイルのヘッダー情報を読み込みMap<Integer, String> 形式で返却する処理(添付ファイル)
                    + ファイルのヘッダー情報を読み込みMap<Integer, String>形式で返却する処理(ファイルパス, DBColumnsForm)
                    + ファイルを一時ファイルに保存する処理(添付ファイル) : ※戻り値 保存されたファイルパス
                    + Insert文を生成する処理(ファイルパス, DbColumnsForm) : ※戻り値 フォーム情報から作成されたInsert文

                }

                class DbFileCreateServiceImpl implements DbFileCreateService{
                    - fileHelperFactory: FileHelperFactory
                    + findHeader(fileObj: MultipartFile): Map<Integer, String>
                    + findHeader(filePath: String, form: DBColumnsForm) Map<Integer, String>
                    + fileToSaveTemporarily(fileObj: MultipartFile) : String
                    + makeInsertSentence(filePath: String, form: DBColumnsForm): String
                    - createDbColumnForm(form: DBColumnsForm, headerMap : Map<Integer, String>, fileResource : Resource): void
                }


            }
        }
        package controller{
            class DbFileCreateController{
                - dbFileCreateService: DbFileCreateServiceImpl
                + 様々なGetPostメソッド(): String
            }


            package form{
                class DBColumnsForm{
                    - fileName: String
                    - tableName: String
                    - dbColumns: List<DBColumn>
                    + addDbColumns(dbColumn: DBColumn): boolean
                    + get()
                    + set()
                }

                class DBColumn{
                    - columnName: String
                    - columnIndex: Integer
                    - changeColumnName: String
                    - type: ColumnType
                    - include: boolean
                    + of(columnName: String, columnIndex: Integer): DBColumn
                    + get()
                    + set()
                }

                enum ColumnType{
                    STRING
                    NUMBER
                    NULL
                }



                class OriginalDataFileForm{
                    - multipartFile: MultipartFile
                    + getMultipartFile(): MultipartFile
                    + setMultipartFile(multipartFile: MultipartFile): void
                }
            }


            package validator{
                class DBColumnsValidator{
                    + isValid(): boolean
                }

                class ExpectedFileValidator{
                    + isValid(): boolean
                }
            }
        }
    }

    package session{
        class UserSession{
            - temporalFilePath: String
            + getTemporalFilePath(): String
            + setTemporalFilePath(filePath: String): void
        }
    }

    package file_view{
        class DataFileView{
             # renderMergedOutputModel(model, request, response): void
             - renderInsertFile(model, insertSentence,response): void
        }

        class ExcelFileView{
             # buildExcelDocument(model, workbook, request, response): void
        }
    }
}

ExcelInformationHelper <.. FileHelperFactoryImpl
CsvInformationHelper <.. FileHelperFactoryImpl
NoneHelper <.. FileHelperFactoryImpl

FileHelperFactoryImpl <-- DbFileCreateServiceImpl

DbFileCreateController --> DbFileCreateServiceImpl

DBColumnsForm o-- DBColumn
DBColumn o-- ColumnType
DBColumnsForm <-- DbFileCreateController
OriginalDataFileForm <-- DbFileCreateController

DbFileCreateController --> UserSession
ExpectedFileValidator <-- OriginalDataFileForm
DBColumnsValidator <-- DBColumnsForm

DbFileCreateController --> DataFileView
DbFileCreateController --> ExcelFileView
@enduml